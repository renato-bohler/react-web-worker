{"version":3,"sources":["WebWorker.js","App.js","index.js"],"names":["WebWorker","thread","doWork","self","state","doCallback","requestAnimationFrame","postMessage","addEventListener","data","command","initial","undefined","workInterval","setInterval","updateInterval","clearInterval","this","reset","code","toString","blob","Blob","worker","Worker","URL","createObjectURL","runState","callback","removeEventListener","App","props","count","addCallback","event","console","log","setState","stop","timeEnd","time","className","type","onClick","start","disabled","isRunning","pause","isStopped","React","Component","ReactDOM","render","document","getElementById"],"mappings":"2PAAqBA,G,iBACnB,aAAe,yBAsDfC,OAAS,WACP,IAAMC,EAAS,WACbC,KAAKC,OAAS,GAGVC,EAAa,kBACjBF,KAAKG,uBAAsB,kBAAMC,YAAYJ,KAAKC,WAEpDD,KAAKK,iBACH,WACA,YAAqC,IAAD,IAAjCC,KAAQC,EAAyB,EAAzBA,QAASC,EAAgB,EAAhBA,QAClB,OAAQD,GACN,IAAK,aACaE,IAAZD,IACFR,KAAKC,MAAQO,GAGfR,KAAKU,aAAeC,YAAYZ,GAChCC,KAAKY,eAAiBD,YAAYT,GAClC,MACF,IAAK,QACL,IAAK,OACa,SAAZK,IACFP,KAAKC,MAAQ,GAGfY,cAAcb,KAAKU,cACnBG,cAAcb,KAAKY,gBAEnBR,YAAYJ,KAAKC,YAlFzBa,KAAKC,Q,oDAIL,IAAMC,EAAOF,KAAKhB,OAAOmB,WACnBC,EAAO,IAAIC,KAAK,CAAC,IAAD,OAAKH,EAAL,SAEtBF,KAAKM,OAAS,IAAIC,OAAOC,IAAIC,gBAAgBL,IAC7CJ,KAAKU,SAAW,Y,kCAGNC,GACV,OAAOX,KAAKM,OAAOf,iBAAiB,UAAWoB,K,qCAGlCA,GACb,OAAOX,KAAKM,OAAOM,oBAAoB,UAAWD,K,4BAG9CjB,GACJM,KAAKM,OAAOhB,YAAY,CAAEG,QAAS,QAASC,YAC5CM,KAAKU,SAAW,Y,8BAIhBV,KAAKM,OAAOhB,YAAY,CAAEG,QAAS,UACnCO,KAAKU,SAAW,W,6BAIhBV,KAAKM,OAAOhB,YAAY,CAAEG,QAAS,SACnCO,KAAKU,SAAW,Y,kCAIhB,MAAyB,YAAlBV,KAAKU,W,iCAIZ,MAAyB,WAAlBV,KAAKU,W,kCAIZ,MAAyB,YAAlBV,KAAKU,a,MCxCKG,E,YACnB,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACD3B,MAAQ,CAAE4B,MAAO,GACtB,EAAKT,OAAS,IAAIvB,EAHD,E,iFAME,IAAD,OAClBiB,KAAKM,OAAOU,aAAY,SAAAC,GACtBC,QAAQC,IAAI,6BAA8BF,EAAMzB,MAChD,EAAK4B,SAAS,CAAEL,MAAOE,EAAMzB,UAG/BQ,KAAKM,OAAOe,S,+BAGJ,IAAD,OACCN,EAAUf,KAAKb,MAAf4B,MASR,OAPAG,QAAQI,QAAQ,UAChBJ,QAAQK,KAAK,UACbL,QAAQC,IAAI,uBAAwB,CAClCL,MAAOd,KAAKc,MACZ3B,MAAOa,KAAKb,QAIZ,yBAAKqC,UAAU,OACb,8BACE,gCACE,8EACA,sGAKF,2BAAIT,GACJ,4BACEU,KAAK,SACLC,QAAS,kBAAM,EAAKpB,OAAOqB,SAC3BC,SAAU5B,KAAKM,OAAOuB,aAHxB,SAOA,4BACEJ,KAAK,SACLC,QAAS,kBAAM,EAAKpB,OAAOwB,SAC3BF,UAAW5B,KAAKM,OAAOuB,aAHzB,SAOA,4BACEJ,KAAK,SACLC,QAAS,kBAAM,EAAKpB,OAAOe,QAC3BO,SAAU5B,KAAKM,OAAOyB,aAHxB,c,GAnDuBC,IAAMC,WCAvCC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.9e57f871.chunk.js","sourcesContent":["export default class WebWorker {\n  constructor() {\n    this.reset();\n  }\n\n  reset() {\n    const code = this.thread.toString();\n    const blob = new Blob([`(${code})()`]);\n\n    this.worker = new Worker(URL.createObjectURL(blob));\n    this.runState = 'stopped';\n  }\n\n  addCallback(callback) {\n    return this.worker.addEventListener('message', callback);\n  }\n\n  removeCallback(callback) {\n    return this.worker.removeEventListener('message', callback);\n  }\n\n  start(initial) {\n    this.worker.postMessage({ command: 'start', initial });\n    this.runState = 'started';\n  }\n\n  pause() {\n    this.worker.postMessage({ command: 'pause' });\n    this.runState = 'paused';\n  }\n\n  stop() {\n    this.worker.postMessage({ command: 'stop' });\n    this.runState = 'stopped';\n  }\n\n  isRunning() {\n    return this.runState === 'started';\n  }\n\n  isPaused() {\n    return this.runState === 'paused';\n  }\n\n  isStopped() {\n    return this.runState === 'stopped';\n  }\n\n  /**\n   * This is the code that runs on the Web Worker thread: it\n   * will be bundled in its own file, and it has its own scope,\n   * that is different from `window`, so we use `self` here in\n   * order to access its scope.\n   */\n  /* eslint-disable no-restricted-globals */\n  thread = () => {\n    const doWork = () => {\n      self.state += 1;\n    };\n\n    const doCallback = () =>\n      self.requestAnimationFrame(() => postMessage(self.state));\n\n    self.addEventListener(\n      'message',\n      ({ data: { command, initial } }) => {\n        switch (command) {\n          case 'start':\n            if (initial !== undefined) {\n              self.state = initial;\n            }\n\n            self.workInterval = setInterval(doWork);\n            self.updateInterval = setInterval(doCallback);\n            break;\n          case 'pause':\n          case 'stop':\n            if (command === 'stop') {\n              self.state = 0;\n            }\n\n            clearInterval(self.workInterval);\n            clearInterval(self.updateInterval);\n\n            postMessage(self.state);\n            break;\n          default:\n            break;\n        }\n      },\n    );\n  };\n}\n","import React from 'react';\nimport './App.css';\n\nimport WebWorker from './WebWorker';\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { count: 0 };\n    this.worker = new WebWorker();\n  }\n\n  componentDidMount() {\n    this.worker.addCallback(event => {\n      console.log('[REACT] Callback received:', event.data);\n      this.setState({ count: event.data });\n    });\n\n    this.worker.stop();\n  }\n\n  render() {\n    const { count } = this.state;\n\n    console.timeEnd('Render');\n    console.time('Render');\n    console.log('[REACT] Rendering...', {\n      props: this.props,\n      state: this.state,\n    });\n\n    return (\n      <div className=\"App\">\n        <main>\n          <header>\n            <p>This countup is being executed by a Web Worker.</p>\n            <p>\n              It counts to infinity and synchronizes it before every\n              browser render.\n            </p>\n          </header>\n          <p>{count}</p>\n          <button\n            type=\"button\"\n            onClick={() => this.worker.start()}\n            disabled={this.worker.isRunning()}\n          >\n            Start\n          </button>\n          <button\n            type=\"button\"\n            onClick={() => this.worker.pause()}\n            disabled={!this.worker.isRunning()}\n          >\n            Pause\n          </button>\n          <button\n            type=\"button\"\n            onClick={() => this.worker.stop()}\n            disabled={this.worker.isStopped()}\n          >\n            Stop\n          </button>\n        </main>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}